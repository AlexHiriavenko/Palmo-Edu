<!-- <v-app-bar-nav-icon
      v-if="$vuetify.display.smAndDown"
      variant="text"
      @click.stop="toggleDrawer"
    ></v-app-bar-nav-icon> -->

<!-- <NavBurger
    :routes="filteredRoutes"
    :modelValue="drawer"
    @update:modelValue="drawer = $event"
  /> -->

<template>
  <v-container fluid class="views">
    <h2 class="text-h3 text-white text-center py-4">Upcoming events</h2>
    <v-row style="max-width: 960px" class="mx-auto">
      <v-col v-for="event in paginatedEvents" :key="event.id" cols="12" md="4">
        <v-card class="v-card-custom mx-auto" elevation="10">
          <v-card-title class="text-center font-weight-bold wrap-text">
            {{ event.name }}
          </v-card-title>
          <v-card-subtitle class="font-weight-bold">
            Price: {{ event.price }}
          </v-card-subtitle>
          <v-card-text class="font-weight-bold">
            Location: {{ event.location }}
          </v-card-text>
          <v-card-text v-formatdate="event.dateTime" class="font-weight-bold">
            Date:
          </v-card-text>
          <v-card-actions class="justify-center">
            <v-btn
              color="primary"
              text="More Details"
              class="font-weight-bold"
            />
          </v-card-actions>
        </v-card>
      </v-col>
    </v-row>

    <PaginationBar
      v-model="page"
      :length="totalPages"
      :total-visible="6"
      @update:modelValue="handlePageChange"
    />
  </v-container>
</template>

<script setup>
  import { useEventsStore } from '@/stores/eventsStore'
  import PaginationBar from '@/components/PaginationBar.vue'

  const eventsStore = useEventsStore()
  const page = ref(1)
  const itemsPerPage = 6

  const paginatedEvents = computed(() => {
    const start = (page.value - 1) * itemsPerPage
    const end = start + itemsPerPage
    console.log(
      'Paginated events computed:',
      eventsStore.events.slice(start, end)
    )
    return eventsStore.events.slice(start, end)
  })

  const totalPages = computed(() => {
    const total = Math.ceil(eventsStore.events.length / itemsPerPage)
    console.log('Total pages computed:', total)
    return total
  })

  function handlePageChange(newPage) {
    console.log('Page changed:', newPage)
    page.value = newPage
  }

  onMounted(() => {
    eventsStore.getEvents().then(() => {
      console.log('Events fetched:', eventsStore.events)
    })
  })
</script>
